        - #Base.include(@__MODULE__,"../basis/BasisStructs.jl")
        - 
        - """
        -   module JCRHF
        - The module required for computation of the wave function using the *Restricted
        - Hartree-Fock* (RHF) method in a Self-Consistent Field (SCF) calculation. This
        - module will be used often, as the RHF wave function is often the zeroth-order
        - wave function for closed-shell systems.
        - """
        - module JCRHF
        - 
        - using JCModules.SIMINT
        - using MPI
        - using JSON
        - 
        - const axial_norm_fact = [1.0 1.0 1.0; 
        -                      0.0 1.0 sqrt(3.0);
        -                      0.0 1.0 sqrt(3.0);
        -                      0.0 0.0 1.0;
        -                      0.0 0.0 sqrt(3.0);
        -                      0.0 0.0 1.0
        -                     ]
        - 
        - Base.include(@__MODULE__,"RHFHelpers.jl")
        - Base.include(@__MODULE__,"RHFSCF.jl")
        - 
        - 
        - """
        -   run(input_info::Dict{String,Dict{String,Any}}, basis::Basis)
        - 
        - Execute the JuliaChem RHF algorithm.
        - 
        - One input variable is required:
        - 1. input_info = Information gathered from the input file.
        - 2. basis = The basis set shells, determined from the input file.
        - 
        - One variable is output:
        - 1. scf = Data saved from the SCF calculation.
        - 
        - Thus, proper use of the RHF.run() function would look like this:
        - 
        - ```
        - scf = RHF.run(input_info, basis)
        - ```
        - """
        - function run(mol::MolStructs.Molecule, basis::BasisStructs.Basis, 
        -   scf_flags; output="none")
        -   
        0   comm=MPI.COMM_WORLD
        - 
        0   if MPI.Comm_rank(comm) == 0 && output == "verbose"
        0       println("--------------------------------------------------------------------------------")
        0       println("                       ========================================                 ")
        0       println("                          RESTRICTED CLOSED-SHELL HARTREE-FOCK                  ")
        0       println("                       ========================================                 ")
        0       println("")
        -   end
        - 
        -   #== set up eris ==#
        -   #if MPI.Comm_rank(comm) == 0 && Threads.threadid() == 1
     1808   if scf_flags["direct"] == true
        -   #  set_up_eri_database(basis)
        -   #else
        0     nshell_simint = SIMINT.allocate_shell_array(basis)
        0     for shell in basis.shells
        0       SIMINT.add_shell(shell)
        -     end
        - 
        -     #SIMINT.normalize_shells()
        0     SIMINT.precompute_shell_pair_data()
        - 
        -     #for ishell::Int64 in 0:(nshell_simint-1)
        -     #  SIMINT.get_simint_shell_info(ishell)
        -     #end
        - 
        -     #end
        -   else
        0     println("Reading integrals from disk is not implemented yet!")
        0     throw()
        -   end
        - 
        -   #== actually perform scf calculation ==#
        -   #GC.enable(false)
        0   scf = rhf_energy(mol, basis, scf_flags; output=output)
        -   #GC.enable(true)
        -   #GC.gc()
        - 
        0   if MPI.Comm_rank(comm) == 0 && output == "verbose"
        0     println("                       ========================================                 ")
        0     println("                             END RESTRICTED CLOSED-SHELL                 ")
        0     println("                                     HARTREE-FOCK                        ")
        0     println("                       ========================================                 ")
        -   end
        - 
        0   return scf
        - end
        - export run
        - 
        - end
        - 
