        - using MATH
        - using JCModules.Globals
        - 
        - using Base.Threads
        - using LinearAlgebra
        - using HDF5
        - using PrettyTables
        - 
        - const do_continue_print = false 
        - const print_eri = false 
        - 
        - function rhf_energy(mol::MolStructs.Molecule, basis::BasisStructs.Basis,
        -   scf_flags::Union{Dict{String,Any},Dict{Any,Any}}; output)
        -   
        0   debug::Bool = scf_flags["debug"]
        0   niter::Int = scf_flags["niter"]
        - 
        0   ndiis::Int = scf_flags["ndiis"]
        0   dele::Float64 = scf_flags["dele"]
        0   rmsd::Float64 = scf_flags["rmsd"]
        0   load::String = scf_flags["load"]
        0   fdiff::Bool = scf_flags["fdiff"]
        - 
        0   return rhf_kernel(mol,basis; output=output, debug=debug, niter=niter,
        -     ndiis=ndiis, dele=dele, rmsd=rmsd, load=load, fdiff=fdiff)
        - end
        - 
        - 
        - """
        - 	 rhf_kernel(FLAGS::RHF_Flags, basis::Basis, read_in::Dict{String,Any},
        -        type::T)
        - Summary
        - ======
        - Perform the core RHF SCF algorithm.
        - 
        - Arguments
        - ======
        - FLAGS = Input flags
        - 
        - basis = Generated basis set
        - 
        - read_in = file required to read in from input file
        - 
        - type = Precision of variables in calculation
        - """
        - function rhf_kernel(mol::MolStructs.Molecule, 
        -   basis::BasisStructs.Basis; 
        -   output::String, debug::Bool, niter::Int, ndiis::Int, 
        -   dele::Float64, rmsd::Float64, load::String, fdiff::Bool)
        - 
        0   comm=MPI.COMM_WORLD
    15136   calculation_status = Dict([])
        - 
        -   #== read in some variables from scf input ==#
        0   debug_output = debug ? h5open("debug.h5","w") : nothing
        - 
        -   #== compute nuclear repulsion energy ==# 
        -   #E_nuc::Float64 = molecule["enuc"]
        0   E_nuc = compute_enuc(mol)
        -   
        -   #S = read_in_oei(molecule["ovr"], basis.norb)
        -   
        -   #== compute one-electron integrals and Hamiltonian ==#
   257664   S = zeros(Float64, (basis.norb, basis.norb))
        0   compute_overlap(S, basis)
        -  
        -   #for i in 1:basis.norb, j in 1:i
        -   #  println("OVR($i,$j): ", S[i,j])
        -   #end
        -   
   257664   T = zeros(Float64, (basis.norb, basis.norb))
        0   compute_ke(T, basis)
        -  
   257664   V = zeros(Float64, (basis.norb, basis.norb))
        0   compute_nah(V, mol, basis)
        - 
        -   #H = read_in_oei(molecule["hcore"], basis.norb)
   257664   H = T .+ V
        -   
        -   #for i in 1:basis.norb, j in 1:i
        -   #  println("HAMIL($i,$j): ", H[i,j])
        -   #end
        -  
        0   if debug && MPI.Comm_rank(comm) == 0
        0     h5write("debug.h5","SCF/Iteration-None/E_nuc", E_nuc)
        0     h5write("debug.h5","SCF/Iteration-None/S", S)
        0     h5write("debug.h5","SCF/Iteration-None/T", T)
        0     h5write("debug.h5","SCF/Iteration-None/V", V)
        0     h5write("debug.h5","SCF/Iteration-None/H", H)
        -   end
        - 
        -   #== build the orthogonalization matrix ==#
   257664   S_evec = eigvecs(LinearAlgebra.Hermitian(S))
        - 
   257664   S_eval_diag = eigvals(LinearAlgebra.Hermitian(S))
        - 
   257664   S_eval = zeros(basis.norb,basis.norb)
        0   for i in 1:basis.norb
        0     S_eval[i,i] = S_eval_diag[i]
        -   end
        -   
   515680   ortho = S_evec*(LinearAlgebra.Diagonal(S_eval)^-0.5)*transpose(S_evec)
        -   
        0   ortho_trans = transpose(LinearAlgebra.Hermitian(ortho))
        - 
        0   if debug && MPI.Comm_rank(comm) == 0
        0     h5write("debug.h5","SCF/Iteration-None/Ortho", ortho)
        -   end
        - 
        -   #== build the initial matrices ==#
        -   F = H
     8800   F_eval = Vector{Float64}(undef,basis.norb)
   257664   F_evec = similar(F)
   257664   F_mo = similar(F)
   257664   F_part = similar(F)
        - 
   257664   D = similar(F)
   257664   C = similar(F)
        - 
        0   if MPI.Comm_rank(comm) == 0 && output == "verbose"
        0     println("----------------------------------------          ")
        0     println("       Starting RHF iterations...                 ")
        0     println("----------------------------------------          ")
        0     println(" ")
        0     println("Iter      Energy                   ΔE                   Drms")
        -   end
        - 
        -   E_elec = 0.0
        -   #@code_warntype iteration(F, D, C, H, F_eval, F_evec, F_mo, F_part, ortho, 
        0   E_elec = iteration(F, D, C, H, F_eval, F_evec, F_mo, F_part, ortho, 
        -     ortho_trans.data, basis, 0, debug)
        -    
        -   #for i in 1:basis.norb, j in 1:i
        -   #  println("DENS($i,$j): ", D[i,j])
        -   #end
        -    
   265760   F = deepcopy(F) #apparently this is needed for some reason
   265760   F_old = deepcopy(F)
        -   
        0   E = E_elec + E_nuc
        -   E_old = E
        - 
        0   if MPI.Comm_rank(comm) == 0 && output == "verbose"
        0     println(0,"     ", E)
        -   end
        - 
        -   #=============================#
        -   #== start scf cycles: #7-10 ==#
        -   #=============================#
        -   #@code_warntype scf_cycles(F, D, C, E, H, ortho, ortho_trans.data, S, 
        0   F, D, C, E, converged = scf_cycles(F, D, C, E, H, ortho, ortho_trans.data, S, 
        -     F_eval, F_evec, F_mo, F_part, F_old, E_nuc, E_elec, E_old, basis; 
        -     output=output, debug=debug, niter=niter, ndiis=ndiis, dele=dele,
        -     rmsd=rmsd, load=load, fdiff=fdiff)
        - 
        0   if !converged
        0     if MPI.Comm_rank(comm) == 0 && output != "none"
        0       println(" ")
        0       println("----------------------------------------")
        0       println(" The SCF calculation did not converge.  ")
        0       println("      Restart data is being output.     ")
        0       println("----------------------------------------")
        0       println(" ")
        -     end
        - 
        0     calculation_fail = Dict(
        -     "success" => false,
        -     "error" => Dict(
        -       "error_type" => "convergence_error",
        -       "error_message" => " SCF calculation did not converge within $niter
        -         iterations. "
        -       )
        -     )
        - 
        0     merge!(calculation_status, calculation_fail)
        - 
        -   else
        0     if MPI.Comm_rank(comm) == 0 && output != "none" 
        0       println(" ")
        0       println("----------------------------------------")
        0       println("   The SCF calculation has converged!   ")
        0       println("----------------------------------------")
        0       println("Total SCF Energy: ",E," h")
        0       println(" ")
        - 
        0       calculation_success = Dict(
        -       "return_result" => E,
        -       "success" => true,
        -       "properties" => Dict(
        -         "return_energy" => E,
        -         "nuclear_repulsion_energy" => E_nuc,
        -         #"scf_iterations" => iter,
        -         "scf_total_energy" => E
        -         )
        -       )
        - 
        0       merge!(calculation_status, calculation_success)
        -     end
        -   end
        - 
        0   if debug close(debug_output) end
        - 
 16212745   scf = Dict("Fock" => F,                                                       
        -              "Density" => D,                                                    
        -              "MO Coeff" => C,                                                   
        -              "Energy" => E,                                                     
        -              "Converged?" => converged                                      
        -             )                                                                   
        -                                                                                 
        0   return scf 
        - end
        - 
        - function scf_cycles(F::Matrix{Float64}, D::Matrix{Float64}, C::Matrix{Float64},
        -   E::Float64, H::Matrix{Float64}, ortho::Matrix{Float64}, 
        -   ortho_trans::Matrix{Float64}, S::Matrix{Float64}, F_eval::Vector{Float64}, 
        -   F_evec::Matrix{Float64}, F_mo::Matrix{Float64}, F_part::Matrix{Float64},
        -   F_old::Matrix{Float64}, E_nuc::Float64, E_elec::Float64, E_old::Float64, 
        -   basis::BasisStructs.Basis;
        -   output::String, debug::Bool, niter::Int, ndiis::Int, 
        -   dele::Float64, rmsd::Float64, load::String, fdiff::Bool)
        - 
        - 
        -   #== read in some more variables from scf flags input ==#
        0   nsh = length(basis.shells)
        -   nindices = (nsh*(nsh+1)*(nsh^2 + nsh + 2)) >> 3
        - 
        -   #== build DIIS arrays ==#
   260832   F_array = fill(similar(F), ndiis)
        - 
   257664   e = similar(F)
   259776   test_e = [ similar(F) ]
   260832   e_array = fill(similar(F), ndiis)
   260832   e_array_old = fill(similar(F), ndiis-1)
        -   
   259776   test_F = [ similar(F) ]
   260832   F_array_old = fill(similar(F), ndiis-1)
        - 
   257664   FD = similar(F)
   257664   FDS = similar(F)
   257664   SDF = similar(F)
        -   
        -   #== build arrays needed for post-fock build iteration calculations ==#
   257664   F_temp = similar(F)
   257664   ΔF = similar(F) 
   257664   F_cumul = zeros(size(F)) 
   257664   F_input = similar(F)
        -  
   257664   D_old = similar(F)
   265760   ΔD = deepcopy(D) 
   257664   D_input = similar(F)
        - 
        -   #== build matrix of Cauchy-Schwarz upper bounds ==# 
    73216   schwarz_bounds = zeros(Float64,(nsh,nsh)) 
        0   compute_schwarz_bounds(schwarz_bounds, nsh)
        - 
    73216   Dsh = similar(schwarz_bounds)
   257664   Dsh_abs = similar(D)
        -   
        -   #== allocate miscalleneous things needed for fock build step ==#
        -   max_shell_am = MAX_SHELL_AM
   230912   eri_quartet_batch = Vector{Float64}(undef,1296)
     3520   quartet = ShQuartet(ShPair(basis.shells[1], basis.shells[1]),
        -       ShPair(basis.shells[1], basis.shells[1]))
176001760   simint_workspace = Vector{Float64}(undef,1000000)
        - 
        -   
        -   #== build eri batch arrays ==#
        -   #eri_sizes::Vector{Int64} = load("tei_batch.jld",
        -   #  "Sizes/$quartet_batch_num_old")
        -   #length_eri_sizes::Int64 = length(eri_sizes)
        - 
        -   #@views eri_starts::Vector{Int64} = [1, [ sum(eri_sizes[1:i])+1 for i in 1:(length_eri_sizes-1)]... ]
        - 
        -   #eri_batch::Vector{Float64} = load("tei_batch.jld",
        -   #  "Integrals/$quartet_batch_num_old")
        - 
        -   #eri_sizes = []
        -   #eri_starts = []
        -   #eri_batch = []
        - 
        -   #== execute convergence procedure ==#
        -   scf_converged = true
        - 
        -   #@code_warntype scf_cycles_kernel(F, D, C, E, H, ortho, ortho_trans, S, E_nuc,
        0   E = scf_cycles_kernel(F, D, C, E, H, ortho, ortho_trans, S, E_nuc,
        -     E_elec, E_old, basis, F_array, e, e_array, e_array_old,
        -     F_array_old, F_temp, F_eval, F_evec, F_mo, F_part, F_old, ΔF, F_cumul, 
        -     F_input, D_old, ΔD, D_input, scf_converged, test_e, test_F, FD, FDS, SDF, 
        -     schwarz_bounds, Dsh, Dsh_abs, eri_quartet_batch, quartet, simint_workspace; 
        -     output=output, debug=debug, niter=niter, ndiis=ndiis, dele=dele, 
        -     rmsd=rmsd, load=load, fdiff=fdiff)
        - 
        -   #== we are done! ==#
        0   if debug
        0     h5write("debug.h5","SCF/Iteration-Final/F", F)
        0     h5write("debug.h5","SCF/Iteration-Final/D", D)
        0     h5write("debug.h5","SCF/Iteration-Final/C", C)
        0     h5write("debug.h5","SCF/Iteration-Final/E", E)
        0     h5write("debug.h5","SCF/Iteration-Final/converged", scf_converged)
        -   end
        - 
     1056   return F, D, C, E, scf_converged
        - end
        - 
        - function scf_cycles_kernel(F::Matrix{Float64}, D::Matrix{Float64},
        -   C::Matrix{Float64}, E::Float64, H::Matrix{Float64}, ortho::Matrix{Float64},
        -   ortho_trans::Matrix{Float64}, S::Matrix{Float64}, E_nuc::Float64, 
        -   E_elec::Float64, E_old::Float64, basis::BasisStructs.Basis,
        -   F_array::Vector{Matrix{Float64}}, e::Matrix{Float64},
        -   e_array::Vector{Matrix{Float64}}, e_array_old::Vector{Matrix{Float64}},
        -   F_array_old::Vector{Matrix{Float64}}, F_temp::Matrix{Float64},
        -   F_eval::Vector{Float64}, F_evec::Matrix{Float64}, F_mo::Matrix{Float64}, 
        -   F_part::Matrix{Float64}, F_old::Matrix{Float64}, ΔF::Matrix{Float64},
        -   F_cumul::Matrix{Float64}, F_input::Matrix{Float64}, D_old::Matrix{Float64}, 
        -   ΔD::Matrix{Float64}, D_input::Matrix{Float64}, scf_converged::Bool,  
        -   test_e::Vector{Matrix{Float64}}, test_F::Vector{Matrix{Float64}},
        -   FD::Matrix{Float64}, FDS::Matrix{Float64}, SDF::Matrix{Float64}, 
        -   schwarz_bounds::Matrix{Float64}, Dsh::Matrix{Float64}, 
        -   Dsh_abs::Matrix{Float64}, eri_quartet_batch::Vector{Float64}, 
        -   quartet::BasisStructs.ShQuartet, simint_workspace::Vector{Float64};
        -   output, debug, niter, ndiis, dele, rmsd, load, fdiff)
        - 
        -   #== initialize a few more variables ==#
        0   comm=MPI.COMM_WORLD
        - 
        -   B_dim = 1
        -   D_rms = 1.0
        -   ΔE = 1.0 
        - 
        -   #length_eri_sizes = length(eri_sizes)
        - 
        -   #=================================#
        -   #== now we start scf iterations ==#
        -   #=================================#
        -   iter = 1
        -   iter_converged = false
        -   
        0   while !iter_converged
        -     #== reset eri arrays ==#
        -     #if quartet_batch_num_old != 1 && iter != 1
        -     #  resize!(eri_sizes,length_eri_sizes)
        -     #  resize!(eri_starts,length_eri_sizes)
        - 
        -     #  eri_sizes[:] = load("tei_batch.jld",
        -   #      "Sizes/$quartet_batch_num_old")
        - 
        -     #  @views eri_starts[:] = [1, [ sum(eri_sizes[1:i])+1 for i in 1:(length_eri_sizes-1)]... ]
        -       #eri_starts[:] = load("tei_batch.jld",
        -       #  "Starts/$quartet_batch_num_old")
        -       #@views eri_starts[:] = eri_starts[:] .- (eri_starts[1] - 1)
        - 
        -     #  resize!(eri_batch,sum(eri_sizes))
        -     #  eri_batch[:] = load("tei_batch.jld","Integrals/$quartet_batch_num_old")
        -     #end
        - 
        -     #== determine input D and F ==#
        0     D_input .= fdiff ? ΔD : D
        0     F_input .= fdiff ? ΔF : F
        - 
        -     #== compress D into shells in Dsh ==#
        0     for ish in 1:length(basis.shells), jsh in 1:ish
        0       ipos = basis[ish].pos
        0       ibas = basis[ish].nbas
        - 
        0       jpos = basis[jsh].pos
        0       jbas = basis[jsh].nbas
        -       
        -       max_value = 0.0
        0       for i in ipos:(ipos+ibas-1), j in jpos:(jpos+jbas-1) 
        0         max_value = max(max_value, abs(D_input[i,j]))
        -       end
        0       Dsh[ish,jsh] = max_value
        -       
        -       #Dsh_abs[ipos:(ipos+ibas-1),jpos:(jpos+jbas-1)] .= abs.(
        -        # view(D,ipos:(ipos+ibas-1),jpos:(jpos+jbas-1)))
        -       #Dsh[ish, jsh] = maximum(view(Dsh_abs,ipos:(ipos+ibas-1),
        -       #  jpos:(jpos+jbas-1)))
        0       Dsh[jsh, ish] = Dsh[ish, jsh] 
        -     end
        -   
        -     #== build new Fock matrix ==#
 62388480     F_temp .= fock_build(F_input, D_input, H, basis, schwarz_bounds, Dsh, 
        -       eri_quartet_batch, quartet, simint_workspace, debug, load)
        - 
        0     F_input .= MPI.Allreduce(F_temp,MPI.SUM,comm)
        0     MPI.Barrier(comm)
        - 
        0     if debug && MPI.Comm_rank(comm) == 0
        0       h5write("debug.h5","SCF/Iteration-$iter/F/Skeleton", F_input)
        -     end
        -  
        0     if fdiff 
        0       ΔF .= F_input
        0       F_cumul .+= ΔF
        0       F .= F_cumul .+ H
        -     else
        0       F .= F_input .+ H
        -     end
        - 
        0     if debug && MPI.Comm_rank(comm) == 0
        0       h5write("debug.h5","SCF/Iteration-$iter/F/Total", F)
        -     end
        - 
        -     #== do DIIS ==#
        0     if ndiis > 0
        0       BLAS.symm!('L', 'U', 1.0, F, D, 0.0, FD)
        0       BLAS.gemm!('N', 'N', 1.0, FD, S, 0.0, FDS)
        -       
        0       transpose!(SDF, FDS)
        -       
        0       e .= FDS .- SDF
        - 
     1056       e_array_old = view(e_array,1:(ndiis-1))
   265760       test_e[1] = deepcopy(e) #i wish i didn't have to do deepcopy, but alas
     3872       e_array = vcat(test_e, e_array_old)
        -       
     1056       F_array_old = view(F_array,1:(ndiis-1))
   265760       test_F[1] = deepcopy(F) #i wish i didn't have to do deepcopy, but alas
     3872       F_array = vcat(test_F, F_array_old)
        - 
        0       if iter > 1
        0         B_dim += 1
        0         B_dim = min(B_dim,ndiis)
        -         try
        0           DIIS(F, e_array, F_array, B_dim)
        -         catch
        -           B_dim = 2
        0           DIIS(F, e_array, F_array, B_dim)
        -         end
        -       end
        -     end
        - 
        -     #== dynamic damping of Fock matrix ==#
        0     x = ΔE >= 1.0 ? 0.9/log(50,50*ΔE) : 0.9
        0     F .= x.*F .+ (1.0-x).*F_old 
        - 
        0     F_old .= F
        - 
        -     #== obtain new F,D,C matrices ==#
        0     D_old .= D
        - 
        0     E_elec = iteration(F, D, C, H, F_eval, F_evec, F_mo, F_part,
        -       ortho, ortho_trans, basis, iter, debug)
        - 
        -     #== check for convergence ==#
        0     ΔD .= D .- D_old
        0     D_rms = √(@∑ ΔD ΔD)
        - 
        0     E = E_elec+E_nuc
        0     ΔE = E - E_old
        - 
        0     if MPI.Comm_rank(comm) == 0 && output == "verbose"
        0       println(iter,"     ", E,"     ", ΔE,"     ", D_rms)
        -     end
        - 
        0     iter_converged = abs(ΔE) <= dele && D_rms <= rmsd
        0     iter += 1
        0     if iter > niter
        -       scf_converged = false
        -       break
        -     end
        - 
        -     #== if not converged, replace old D and E values for next iteration ==#
        -     E_old = E
        -   end
        - 
        0   return E
        - end
        - #=
        - """
        - 	 fock_build(F::Array{Float64}, D::Array{Float64}, tei::Array{Float64}, H::Array{Float64})
        - Summary
        - ======
        - Perform Fock build step.
        - 
        - Arguments
        - ======
        - F = Current iteration's Fock Matrix
        - 
        - D = Current iteration's Density Matrix
        - 
        - tei = Two-electron integral array
        - 
        - H = One-electron Hamiltonian Matrix
        - """
        - =#
        - 
        - @inline function fock_build(F::Matrix{Float64}, D::Matrix{Float64}, 
        -   H::Matrix{Float64}, basis::BasisStructs.Basis, 
        -   schwarz_bounds::Matrix{Float64}, Dsh::Matrix{Float64},
        -   eri_quartet_batch::Vector{Float64}, quartet::BasisStructs.ShQuartet,
        -   simint_workspace::Vector{Float64}, debug::Bool, load::String)
        - 
        -   comm = MPI.COMM_WORLD
        -   
        -   fill!(F,zero(Float64))
        - 
        -   nsh = length(basis.shells)
        -   nindices = (nsh*(nsh+1)*(nsh^2 + nsh + 2)) >> 3 #bitwise divide by 8
        -  
        -   mutex = Base.Threads.ReentrantLock()
        -   #thread_index_counter = Threads.Atomic{Int64}(nindices)
        -   
        -   #== simply do calculation for serial runs ==#
        -   if MPI.Comm_size(comm) == 1  || load == "static"
        -     ish_old = 0
        -     jsh_old = 0
        -     ksh_old = 0
        -     lsh_old = 0
        - 
        -     #while nindices > 1 
        -     top = nindices - (MPI.Comm_rank(comm))
        -     middle = -MPI.Comm_size(comm) 
        -     #for ijkl in nindices:-1:1
        -     for ijkl in top:middle:1 
        -        #ijkl_index = Threads.atomic_sub!(thread_index_counter, 1)
        -  
        -       #if ijkl_index <= 0 break
        -       #if MPI.Comm_rank(comm) != ijkl_index%MPI.Comm_size(comm) continue end
        - 
        -       fock_build_thread_kernel(F, D,
        -         H, basis, eri_quartet_batch, mutex,
        -         quartet, ijkl, simint_workspace, schwarz_bounds, Dsh,
        -         ish_old, jsh_old, ksh_old, lsh_old, debug)
        -     end
        -       
        -     #lock(mutex)
        -     #  F .+= F_priv
        -     #unlock(mutex)
        -   #== use static task distribution for multirank runs if selected ==#
        -   elseif MPI.Comm_size(comm) > 1 && load == "dynamic"
        -     batch_size = ceil(Int,nindices/(MPI.Comm_size(comm)*10000)) 
        - 
        -     #== master rank ==#
        -     if MPI.Comm_rank(comm) == 0 
        -       #== send out initial tasks to slaves ==#
        -       task = [ nindices ]
        -       initial_task = 1
        -   
        -       recv_mesg = [ 0 ]
        -      
        -       #println("Start sending out initial tasks") 
        -       while initial_task < MPI.Comm_size(comm)
        -         #println("Sending task $task to rank $initial_task")
        -         sreq = MPI.Send(task, initial_task, 1, comm)
        -         #println("Task $task sent to rank $initial_task") 
        -         
        -         task[1] -= batch_size 
        -         initial_task += 1 
        -       end
        -       #println("Done sending out intiial tasks") 
        - 
        -       #== hand out quartets to slaves dynamically ==#
        -       #println("Start sending out rest of tasks") 
        -       while task[1] > 0 
        -         status = MPI.Probe(MPI.MPI_ANY_SOURCE, 1, comm) 
        -         rreq = MPI.Recv!(recv_mesg, status.source, 1, comm)  
        -         #println("Sending task $task to rank ", status.source)
        -         sreq = MPI.Send(task, status.source, 1, comm)  
        -         #println("Task $task sent to rank ", status.source)
        -         task[1] -= batch_size 
        -       end
        -       #println("Done sending out rest of tasks") 
        -      
        -       #== hand out ending signals once done ==#
        -       #println("Start sending out enders") 
        -       for rank in 1:(MPI.Comm_size(comm)-1)
        -         #println("Sending ender to rank $rank")
        -         sreq = MPI.Send([ -1 ], rank, 0, comm)                           
        -         #println("Ender sent to rank $rank")
        -       end      
        -       #println("Done sending out enders") 
        -     #== slave ranks perform actual computations on quartets ==#
        -     elseif MPI.Comm_rank(comm) > 0
        -       #== intial setup ==#
        -       recv_mesg = [ 0 ]
        -       send_mesg = [ 0 ]
        - 
        -       ish_old = 0
        -       jsh_old = 0
        -       ksh_old = 0
        -       lsh_old = 0
        - 
        -       #mutex = Base.Threads.ReentrantLock()
        -       thread_index_counter = nindices
        -  
        -       #for thread in 1:Threads.nthreads()
        -       #  F_priv = zeros(basis.norb,basis.norb)
        - 
        -       #== do computations ==# 
        -       while true 
        -         #== get shell quartet ==#
        -         status = MPI.Probe(0, MPI.MPI_ANY_TAG, comm)
        -         #println("About to recieve task from master")
        -         rreq = MPI.Recv!(recv_mesg, status.source, status.tag, comm)
        - 
        -         ijkl_index = recv_mesg[1]
        -         #println(ijkl_index)
        -         if ijkl_index < 0 break end
        -         #println("Recieved task $ijkl_index from master")
        -  
        -         #for rank in 1:MPI.Comm_size(comm)
        -         #  if MPI.Comm_rank(comm) == rank
        -         #    println("IJKL_INDEX: ", ijkl_index)
        -         #  end
        -         #end
        -         #println("NEW BATCH")
        -         for ijkl in ijkl_index:-1:(max(1,ijkl_index-batch_size+1))
        -           #println("IJKL: $ijkl")
        - 
        -          fock_build_thread_kernel(F, D,
        -             H, basis, eri_quartet_batch, mutex,
        -             quartet, ijkl, simint_workspace, schwarz_bounds, Dsh,
        -             ish_old, jsh_old, ksh_old, lsh_old, debug)
        -         end
        - 
        -         send_mesg[1] = MPI.Comm_rank(comm)
        -         MPI.Send(send_mesg, 0, 1, comm)
        -       #lock(mutex)
        -       #F .+= F_priv
        -       #unlock(mutex)
        -       end
        -     end
        -     MPI.Barrier(comm)
        -   end
        - 
        -   for iorb in 1:basis.norb, jorb in 1:iorb
        -     if iorb != jorb
        -       F[iorb,jorb] /= 2.0
        -       F[jorb,iorb] = F[iorb,jorb]
        -     end
        -   end
        - 
        -   return F
        - end
        - 
        - @inline function fock_build_thread_kernel(F::Matrix{Float64}, D::Matrix{Float64},
        -   H::Matrix{Float64}, basis::BasisStructs.Basis, 
        -   eri_quartet_batch::Vector{Float64}, mutex, 
        -   quartet::ShQuartet, ijkl_index::Int64,
        -   simint_workspace::Vector{Float64}, schwarz_bounds::Matrix{Float64}, 
        -   Dsh::Matrix{Float64}, ish_old::Int64, jsh_old::Int64, ksh_old::Int64, 
        -   lsh_old::Int64, debug::Bool)
        - 
        -   comm=MPI.COMM_WORLD
        -   
        -   #== determine shells==# 
        -   bra_pair = decompose(ijkl_index)
        -   ket_pair = ijkl_index - triangular_index(bra_pair)
        - 
        -   #quartet.bra = basis.shpair_ordering[bra_pair]
        -   #quartet.ket = basis.shpair_ordering[ket_pair]
        -  
        -   #ish = quartet.bra.sh_a.shell_id 
        -   #jsh = quartet.bra.sh_b.shell_id 
        -   #ksh = quartet.ket.sh_a.shell_id 
        -   #lsh = quartet.ket.sh_b.shell_id 
        -   
        -   ish = decompose(bra_pair)
        -   jsh = bra_pair - triangular_index(ish)
        - 
        -   ksh = decompose(ket_pair)
        -   lsh = ket_pair - triangular_index(ksh)
        - 
        -   icls = unsafe_string(quartet.bra.sh_a.class)
        -   jcls = unsafe_string(quartet.bra.sh_b.class) 
        -   kcls = unsafe_string(quartet.ket.sh_a.class) 
        -   lcls = unsafe_string(quartet.ket.sh_b.class)
        - 
        -   #println("QUARTET($ish, $jsh, $ksh, $lsh) -> ($icls $jcls | $kcls $lcls)")
        - 
        -   #== create shell quartet ==#
        -   quartet.bra.sh_a = basis[ish]
        -   quartet.bra.sh_b = basis[jsh]
        -   quartet.ket.sh_a = basis[ksh]
        -   quartet.ket.sh_b = basis[lsh]
        -   
        -   #== Cauchy-Schwarz screening ==#
        -   bound = schwarz_bounds[ish, jsh]*schwarz_bounds[ksh, lsh] 
        - 
        -   dijmax = 4.0*Dsh[ish, jsh]
        -   dklmax = 4.0*Dsh[ksh, lsh]
        -   
        -   dikmax = Dsh[ish, ksh]
        -   dilmax = Dsh[ish, lsh]
        -   djkmax = Dsh[jsh, ksh]
        -   djlmax = Dsh[jsh, lsh]
        -  
        -   maxden = max(dijmax, dklmax, dikmax, dilmax, djkmax, djlmax)
        -   bound *= maxden
        - 
        -   #== fock build for significant shell quartets ==# 
        -   if abs(bound) >= 1.0E-10 
        -     #== compute electron repulsion integrals ==#
        -     compute_eris(quartet, ish, jsh, ksh, lsh, eri_quartet_batch, simint_workspace)
        - 
        -     #== contract ERIs into Fock matrix ==#
        -     contract_eris(F, D, eri_quartet_batch, quartet,
        -       ish, jsh, ksh, lsh, debug)
        -   end
        -     #if debug println("END TWO-ELECTRON INTEGRALS") end
        - end
        - 
        - @inline function compute_eris(quartet, ish::Int64, jsh::Int64, ksh::Int64,
        -   lsh::Int64, eri_quartet_batch::Vector{Float64},
        -   simint_workspace::Vector{Float64})
        - 
        -   #fill!(eri_quartet_batch, 0.0)
        -   #ish = quartet.bra.sh_a.shell_id
        -   #jsh = quartet.bra.sh_b.shell_id
        -   #ksh = quartet.ket.sh_a.shell_id
        -   #lsh = quartet.ket.sh_b.shell_id
        - 
        -   #= actually compute integrals =#
        -   SIMINT.compute_eris(ish, jsh, ksh, lsh, eri_quartet_batch, 
        -     simint_workspace)
        - 
        -   amμ = quartet.bra.sh_a.am
        -   amν = quartet.bra.sh_b.am
        -   amλ = quartet.ket.sh_a.am
        -   amσ = quartet.ket.sh_b.am
        - 
        -   nμ = quartet.bra.sh_a.nbas
        -   nν = quartet.bra.sh_b.nbas
        -   nλ = quartet.ket.sh_a.nbas
        -   nσ = quartet.ket.sh_b.nbas
        - 
        -   μνλσ = 0 
        -   for μsize::Int64 in 0:(nμ-1), νsize::Int64 in 0:(nν-1)
        -     μνλσ = nσ*nλ*νsize + nσ*nλ*nν*μsize
        -       
        -     μnorm = axial_norm_fact[μsize+1,amμ]
        -     νnorm = axial_norm_fact[νsize+1,amν]
        - 
        -     μνnorm = μnorm*νnorm
        - 
        -     for λsize::Int64 in 0:(nλ-1), σsize::Int64 in 0:(nσ-1)
        -       μνλσ += 1 
        -    
        -       λnorm = axial_norm_fact[λsize+1,amλ]
        -       σnorm = axial_norm_fact[σsize+1,amσ]
        -     
        -       λσnorm = λnorm*σnorm 
        -       eri_quartet_batch[μνλσ] *= μνnorm*λσnorm
        -     end 
        -   end
        - 
        -   #=
        -   if am[1] == 3 || am[2] == 3 || am[3] == 3 || am[4] == 3
        -     for idx in 1:nμ*nν*nλ*nσ 
        -     #for idx in 1:1296
        -       eri = eri_quartet_batch[idx]
        -       println("QUARTET($ish, $jsh, $ksh, $lsh): $eri")
        -     end
        -   end
        -   =#
        - end
        - 
        - 
        - @inline function contract_eris(F_priv::Matrix{Float64}, D::Matrix{Float64},
        -   eri_batch::Vector{Float64}, quartet::ShQuartet, ish::Int64, jsh::Int64,
        -   ksh::Int64, lsh::Int64, debug::Bool)
        - 
        -   norb = size(D,1)
        -   
        -   #ish = quartet.bra.sh_a.shell_id
        -   #jsh = quartet.bra.sh_b.shell_id
        -   #ksh = quartet.ket.sh_a.shell_id
        -   #lsh = quartet.ket.sh_b.shell_id
        - 
        -   pμ = quartet.bra.sh_a.pos
        -   nμ = quartet.bra.sh_a.nbas
        - 
        -   pν = quartet.bra.sh_b.pos
        -   nν = quartet.bra.sh_b.nbas
        -   
        -   pλ = quartet.ket.sh_a.pos
        -   nλ = quartet.ket.sh_a.nbas
        -   
        -   pσ = quartet.ket.sh_b.pos
        -   nσ = quartet.ket.sh_b.nbas
        - 
        -   #amμ = quartet.bra.sh_a.am
        -   #amν = quartet.bra.sh_b.am
        -   #amλ = quartet.ket.sh_a.am
        -   #amσ = quartet.ket.sh_b.am
        -   #am = [ amμ, amν, amλ, amσ ]
        - 
        -   μνλσ = 0
        -   for μsize::Int64 in 0:(nμ-1), νsize::Int64 in 0:(nν-1)
        -     μμ = μsize + pμ
        -     νν = νsize + pν
        - 
        -     if μμ < νν && ish == jsh 
        -       #if do_continue_print println("CONTINUE BRA: $μμ, $νν") end
        -       continue 
        -     end
        - 
        -     μνλσ = nσ*nλ*νsize + nσ*nλ*nν*μsize
        -     for λsize::Int64 in 0:(nλ-1), σsize::Int64 in 0:(nσ-1)
        -       λλ = λsize + pλ
        -       σσ = σsize + pσ
        - 
        -       #if debug
        -         #if do_continue_print print("$μμ, $νν, $λλ, $σσ => ") end
        -       #end
        - 
        -       #μνλσ = 1 + σsize + nσ*λsize + nσ*nλ*νsize + nσ*nλ*nν*μsize
        -       μνλσ += 1 
        -   
        -       eri = eri_batch[μνλσ] 
        -    
        -       if abs(eri) < 1.0E-10
        -         #if do_continue_print println("CONTINUE SCREEN") end
        -         continue 
        -       end
        - 
        -       if λλ < σσ && ksh == lsh 
        -         #if do_continue_print println("CONTINUE KET") end
        -         continue 
        -       end
        -   
        -       μ, ν = (μμ > νν) ? (μμ, νν) : (νν, μμ)
        -       λ, σ = (λλ > σσ) ? (λλ, σσ) : (σσ, λλ)
        - 
        -       μν = triangular_index(μ,ν)                                                    
        -       λσ = triangular_index(λ,σ)                                                    
        -        
        -       if μν < λσ 
        -         if ish == ksh && jsh == lsh 
        -           #if do_continue_print println("CONTINUE BRAKET") end
        -           continue 
        -         else
        -           μ, ν, λ, σ = λ, σ, μ, ν
        -         end
        -       end
        - 
        -       #println("QUARTET($ish, $jsh, $ksh, $lsh): $eri")
        -       #println("ERI($μ, $ν, $λ, $σ) = $eri") 
        -       
        -       eri *= (μ == ν) ? 0.5 : 1.0 
        -       eri *= (λ == σ) ? 0.5 : 1.0
        -       eri *= ((μ == λ) && (ν == σ)) ? 0.5 : 1.0
        - 
        -       #λσ = λ + norb*(σ-1)
        -       #μν = μ + norb*(ν-1)
        -       #μλ = μ + norb*(λ-1)
        -       #μσ = μ + norb*(σ-1)
        -       #νλ = max(ν,λ) + norb*(min(ν,λ)-1)
        -       #νσ = max(ν,σ) + norb*(min(ν,σ)-1)
        - 
        -       F_priv[λ,σ] += 4.0 * D[μ,ν] * eri
        -       F_priv[μ,ν] += 4.0 * D[λ,σ] * eri
        -       F_priv[μ,λ] -= D[ν,σ] * eri
        -       F_priv[μ,σ] -= D[ν,λ] * eri
        -       F_priv[max(ν,λ), min(ν,λ)] -= D[μ,σ] * eri
        -       F_priv[max(ν,σ), min(ν,σ)] -= D[μ,λ] * eri
        -     end
        -   end
        - end
        - 
        - #=
        - """
        - 	 iteration(F::Matrix{Float64}, D::Matrix{Float64}, H::Matrix{Float64}, ortho::Matrix{Float64})
        - Summary
        - ======
        - Perform single SCF iteration.
        - 
        - Arguments
        - ======
        - D = Current iteration's Density Matrix
        - 
        - H = One-electron Hamiltonian Matrix
        - 
        - ortho = Symmetric Orthogonalization Matrix
        - """
        - =#
        - function iteration(F_μν::Matrix{Float64}, D::Matrix{Float64},
        -   C::Matrix{Float64}, H::Matrix{Float64}, F_eval::Vector{Float64},
        -   F_evec::Matrix{Float64}, F_mo::Matrix{Float64}, F_part::Matrix{Float64}, 
        -   ortho::Matrix{Float64}, ortho_trans::Matrix{Float64},
        -   basis::BasisStructs.Basis, iter::Int, debug::Bool)
        - 
        0   comm=MPI.COMM_WORLD
        - 
        -   #display(ortho) 
        -   #for i in 1:size(ortho)[1], j in 1:i
        -   #  println("ORTHO($i,$j): ", ortho[i,j])
        -   #end
        -    
        -   #== obtain new orbital coefficients ==#
        0   BLAS.symm!('L', 'U', 1.0, ortho_trans, F_μν, 0.0, F_part)
        0   BLAS.gemm!('N', 'N', 1.0, F_part, ortho, 0.0, F_mo)
        -  
        0   F_eval, F_evec = eigen!(LinearAlgebra.Hermitian(F_mo)) 
        -   
        -   #F_eval .= eigvals(LinearAlgebra.Hermitian(F_mo))
        -   #F_evec .= eigvecs(LinearAlgebra.Hermitian(F_mo))
        -   #@views F_evec .= F_evec[:,sortperm(F_eval)] #sort evecs according to sorted evals
        - 
        0   if debug && MPI.Comm_rank(comm) == 0
        0     h5write("debug.h5","SCF/Iteration-$iter/F_evec/Sorted", F_mo)
        -   end
        - 
        -   #C .= ortho*F_evec
        0   BLAS.symm!('L', 'U', 1.0, ortho, F_evec, 0.0, C)
        -   
        0   if debug && MPI.Comm_rank(comm) == 0
        0     h5write("debug.h5","SCF/Iteration-$iter/C", C)
        -   end
        - 
        -   #== build new density matrix ==#
        0   nocc = basis.nels >> 1
        -   norb = basis.norb
        - 
        0   fill!(D, 0.0)
        0   for i in 1:basis.norb, j in 1:basis.norb
        -     #@views D[i,j] = @∑ C[i,1:nocc] C[j,1:nocc]
        0     for iocc in 1:nocc
        0       D[i,j] += C[i, iocc] * C[j, iocc]
        -     end
        -     #D[i,j] = @∑ C[1:nocc,i] C[1:nocc,j]
        -   end
        0   D .*= 2.0
        -  
        -   #== compute new SCF energy ==#
        0   EHF1 = @∑ D F_μν
        0   EHF2 = @∑ D H
        0   E_elec = (EHF1 + EHF2)/2.0
        -   
        0   if debug && MPI.Comm_rank(comm) == 0
        0     h5write("debug.h5","SCF/Iteration-$iter/D", D)
        0     h5write("debug.h5","SCF/Iteration-$iter/E/EHF1", EHF1)
        0     h5write("debug.h5","SCF/Iteration-$iter/E/EHF2", EHF2)
        0     h5write("debug.h5","SCF/Iteration-$iter/E/EHF", E_elec)
        -   end
        - 
        0   return E_elec
        - end
        - 
