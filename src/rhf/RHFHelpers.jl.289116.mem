        - using JCModules.BasisStructs
        - using JCModules.MolStructs
        - using JCModules.Globals
        - 
        - using Base.Threads
        - using MATH
        - using JLD
        - 
        - #=
        - """
        - 	 index(a::Int64,b::Int64)
        - Summary
        - ======
        - Triangular indexing determination.
        - 
        - Arguments
        - ======
        - a = row index
        - 
        - b = column index
        - """
        - =#
        - @inline function triangular_index(a::Int,b::Int)
        -   index = (a*(a-1)) >> 1 #bitwise divide by 2
        -   index += b
        -   return index
        - end
        - 
        - @inline function triangular_index(a::Int)
        -   return (a*(a-1)) >> 1
        - end
        - 
        - @inline function decompose(input::Int)
        -   #return ceil(Int,(-1.0+√(1+8*input))/2.0)
        -   return Base.fptosi(Int, Base.ceil_llvm((-1.0 + 
        -     Base.Math.sqrt_llvm(float(1+8*input)))/2.0))
        -     #return ccall((:decompose, "/export/home/david/projects/Julia/JuliaChem.jl/src/eri/libjeri.so"),
        -   #  Int64, (Int64,), input)
        - end
        - 
        - function read_in_enuc()
        - 	return input_enuc()
        - end
        - 
        - function compute_enuc(mol::MolStructs.Molecule)
        0   E_nuc = 0.0
        0   for iatom in 1:length(mol.atoms), jatom in 1:(iatom-1)
        0     ix = mol.atoms[iatom].atom_center[1] 
        0     jx = mol.atoms[jatom].atom_center[1] 
        - 
        0     iy = mol.atoms[iatom].atom_center[2] 
        0     jy = mol.atoms[jatom].atom_center[2] 
        - 
        0     iz = mol.atoms[iatom].atom_center[3]
        0     jz = mol.atoms[jatom].atom_center[3]
        -   
        0     distance = √((jx-ix)^2 + (jy-iy)^2 + (jz-iz)^2) 
        -     
        0     E_nuc += mol.atoms[iatom].atom_id*mol.atoms[jatom].atom_id/distance
        -   end 
        -   
        0   return E_nuc
        - end
        -  
        - function compute_overlap(S::Matrix{Float64}, basis::BasisStructs.Basis)
        0   for ash in 1:length(basis.shells), bsh in 1:ash
        0     abas = basis.shells[ash].nbas
        0     bbas = basis.shells[bsh].nbas
        -     
        0     apos = basis.shells[ash].pos
        0     bpos = basis.shells[bsh].pos
        -        
   537504     S_block = zeros(abas*bbas)
        0     SIMINT.compute_overlap(ash, bsh, S_block)
        -     
        0     axial_normalization_factor(S_block, basis.shells[ash], basis.shells[bsh])
        - 
        -     idx = 1
        0     for ibas in 0:abas-1, jbas in 0:bbas-1
        0       iorb = apos + ibas
        0       jorb = bpos + jbas
        -      
        0       S[max(iorb,jorb),min(iorb,jorb)] = S_block[idx]
        -       
        0       idx += 1 
        -     end
        -   end
        -  
        0   for iorb in 1:basis.norb, jorb in 1:iorb
        0     if iorb != jorb
        0       S[min(iorb,jorb),max(iorb,jorb)] = S[max(iorb,jorb),min(iorb,jorb)]
        -     end
        -   end
        - end
        - 
        - function compute_ke(T::Matrix{Float64}, basis::BasisStructs.Basis)
        0   for ash in 1:length(basis.shells), bsh in 1:ash
        0     abas = basis.shells[ash].nbas
        0     bbas = basis.shells[bsh].nbas
        -     
        0     apos = basis.shells[ash].pos
        0     bpos = basis.shells[bsh].pos
        -        
   537504     T_block = zeros(Float64, (abas*bbas,))
        0     SIMINT.compute_ke(ash, bsh, T_block)
        -     
        0     axial_normalization_factor(T_block, basis.shells[ash], basis.shells[bsh])
        -     
        -     idx = 1
        0     for ibas in 0:abas-1, jbas in 0:bbas-1
        0       iorb = apos + ibas
        0       jorb = bpos + jbas
        -       
        0       T[max(iorb,jorb),min(iorb,jorb)] = T_block[idx]
        -       
        0       idx += 1 
        -     end
        -   end
        -   
        0   for iorb in 1:basis.norb, jorb in 1:iorb
        0     if iorb != jorb
        0       T[min(iorb,jorb),max(iorb,jorb)] = T[max(iorb,jorb),min(iorb,jorb)]
        -     end
        -   end
        - end
        - 
        - function compute_nah(V::Matrix{Float64}, mol::MolStructs.Molecule, 
        -   basis::BasisStructs.Basis)
        -   
        -   #== define ncenter ==#
        0   ncenter::Int64 = length(mol.atoms)
        -   
     3520   Z = Vector{Float64}([])
     3520   x = Vector{Float64}([])
     3520   y = Vector{Float64}([])
     3520   z = Vector{Float64}([])
        - 
        0   for atom in mol.atoms 
     2816     push!(Z, convert(Float64,atom.atom_id))  
     2816     push!(x, atom.atom_center[1])  
     2816     push!(y, atom.atom_center[2])  
     2816     push!(z, atom.atom_center[3])  
        -   end
        - 
        0   for ash in 1:length(basis.shells), bsh in 1:ash
        0     abas = basis.shells[ash].nbas
        0     bbas = basis.shells[bsh].nbas
        -     
        0     apos = basis.shells[ash].pos
        0     bpos = basis.shells[bsh].pos
        -        
   537504     V_block = zeros(Float64, (abas*bbas,))
        0     SIMINT.compute_nah(ncenter, Z, x, y, z, ash, bsh, V_block)
        -     
        0     axial_normalization_factor(V_block, basis.shells[ash], basis.shells[bsh])
        -     
        -     idx = 1
        0     for ibas in 0:abas-1, jbas in 0:bbas-1
        0       iorb = apos + ibas
        0       jorb = bpos + jbas
        -       
        0       V[max(iorb,jorb),min(iorb,jorb)] = V_block[idx]
        -       
        0       idx += 1 
        -     end
        -   end
        -   
        0   for iorb in 1:basis.norb, jorb in 1:iorb
        0     if iorb != jorb
        0       V[min(iorb,jorb),max(iorb,jorb)] = V[max(iorb,jorb),min(iorb,jorb)]
        -     end
        -   end
        - end
        - 
        - function compute_schwarz_bounds(schwarz_bounds::Matrix{Float64}, nsh::Int64)
   230912   eri_quartet_batch = Vector{Float64}(undef,1296)
176001760   simint_workspace = Vector{Float64}(undef,1000000)
        - 
        0   for ash in 1:nsh, bsh in 1:ash
        0     fill!(eri_quartet_batch, 0.0)
        0     SIMINT.compute_eris(ash, bsh, ash, bsh, eri_quartet_batch, 
        -       simint_workspace)
        -     
 48491520     schwarz_bounds[ash, bsh] = sqrt(maximum(abs.(eri_quartet_batch)) )
        -   end
        - 
        0   for ash in 1:nsh, bsh in 1:ash
        0     if ash != bsh
        0       schwarz_bounds[min(ash,bsh),max(ash,bsh)] = 
        -         schwarz_bounds[max(ash,bsh),min(ash,bsh)]
        -     end
        -   end
        - end
        - 
        - 
        - #=
        - """
        - 		get_oei_matrix(oei::Array{Float64,2})
        - Summary
        - ======
        - Extract one-electron integrals from data file object. Kinetic energy integrals,
        - overlap integrals, and nuclear attraction integrals can all be extracted.
        - 
        - Arguments
        - ======
        - oei = array of one-electron integrals to extract
        - """
        - =#
        - function read_in_oei(oei::Vector{T}, nbf::Int) where T
        - 	nbf2 = (nbf*(nbf+1)) >> 1
        - 
        - 	oei_matrix = Matrix{Float64}(undef,(nbf,nbf))
        - 	for ibf in 1:nbf2
        -     i = decompose(ibf)
        -     j = ibf - triangular_index(i)
        - 
        - 		oei_matrix[i,j] = float(oei[ibf])
        - 		oei_matrix[j,i] = oei_matrix[i,j]
        - 	end
        - 
        - 	return oei_matrix
        - end
        - 
        - function DIIS(F::Matrix{Float64}, e_array::Vector{Matrix{Float64}}, 
        -   F_array::Vector{Matrix{Float64}}, B_dim::Int64)
        -   
        0   B = Matrix{Float64}(undef,B_dim+1,B_dim+1)
        0   for i in 1:B_dim, j in 1:B_dim
        0     B[i,j] = @∑ e_array[i] e_array[j]
        - 
        0 	  B[i,B_dim+1] = -1
        0 	  B[B_dim+1,i] = -1
        0 	  B[B_dim+1,B_dim+1] =  0
        -   end
        -   #DIIS_coeff::Vector{Float64} = [ fill(0.0,B_dim)..., -1.0 ]
        0   DIIS_coeff::Vector{Float64} = vcat(zeros(B_dim), [-1.0])
        - 
        -   #DIIS_coeff[:], B[:,:], ipiv = LinearAlgebra.LAPACK.gesv!(B, DIIS_coeff)
        0   DIIS_coeff[:], B[:,:], ipiv = LinearAlgebra.LAPACK.sysv!('U', B, DIIS_coeff)
        -   
        0   fill!(F, zero(Float64))
        0   for index in 1:B_dim
        0     F .+= DIIS_coeff[index] .* F_array[index]
        -   end
        - end
        - 
        - function axial_normalization_factor(oei, ash, bsh)
        0   ama = ash.am
        0   amb = bsh.am
        - 
        0   na = ash.nbas
        0   nb = bsh.nbas
        - 
        -   ab = 0 
        0   for asize::Int64 in 0:(na-1), bsize::Int64 in 0:(nb-1)
        0     ab += 1 
        -    
        0     anorm = axial_norm_fact[asize+1,ama]
        0     bnorm = axial_norm_fact[bsize+1,amb]
        -     
        0     abnorm = anorm*bnorm 
        0     oei[ab] *= abnorm
        -   end
        - end
        - 
        - macro eri_quartet_batch_size(max_am)
        -   return quote
        -     if $(max_am) == "s"
        -       1
        -     elseif $(max_am) == "p"
        -       81
        -     elseif $(max_am) == "L"
        -       256
        -     elseif $(max_am) == "d"
        -       1296
        -     elseif $(max_am) == "f"
        -       10000
        -     else throw
        -     end
        -   end
        - end
        - 
